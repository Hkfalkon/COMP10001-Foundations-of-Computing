def optimise2_lds(plan, start, capacity):
    # TODO implement this function.
    '''takes a 'plan' in our language as a list of moves, an 
    initial 'start' location of our truck, and the (integer) 'capacity' 
    of our truck, and returns an integer corresponding to distance travelled 
    by the truck to execute the given plan.'''
    
    # Add all of possible patterns 'move' by the Exhaustive search strategy 
    # to 'new_lst'.
    # Then find the distance traveled for all the different combinations 
    # of plan.
    
    # Make split two methods to gain the distance of move.
    # One is for move of truck to other dot in other tuple.
    # Another is for move of truck in the same tuple considering the case 
    # multiple trips between the pick up and drop off locations if 
    # number of boxes is bigger than the capacity of the truck.
    # Then we can have all possible patterns of the length of move.
    
    # Then add them to a new list 'result_lst'.
    # Then return the shortest distance 'minimum' from the list 'result_lst'.
    from itertools import permutations
    import math
    
    if capacity >= 0:
        new_lst =[]
        for move in plan:
            move = list(move)
            new_lst.append(move)
    
            move_lst=[]
            per = permutations(new_lst, len(plan))
            for i in per:
                move_lst.append(i)
    
            result_lst=[]
            for move in move_lst:       
                result = 0
                x, y = start
                for movement in move:
                    result += abs(x - movement[1][0]) + abs(y - movement[1][1])
                    x, y = movement[2]                
                for movement in move:
                    boxes = movement[0]
                    rest = math.ceil(boxes / capacity)
                    for i in range(1, len(movement) - 1):
                        result += (2 * rest - 1) * (abs(movement[i][0] 
                                                    - movement[i + 1][0]) 
                                                + abs(movement[i][1] 
                                                      - movement[i + 1][1]))
                result_lst.append(result)
        minimum = min(result_lst)
        return (minimum)
