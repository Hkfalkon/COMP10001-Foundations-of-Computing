def optimise1_lds(plan, start, capacity):
    # TODO implement this function.
    '''takes a plan as a list of moves, an initial start location of our 
    truck, and the (integer) capacity of our truck, and returns an integer 
    corresponding to distance travelled by the truck to execute an updated 
    version of the plan after optimisation using the greedy search strategy.'''
    
    # Store moves sorted by the greedy search strategy.
    # Change coordinate tuple to list in order to replace moves to 
    # list 'way_lst' till no nocation.
    # Find the distance 'dis' between 'current' and 'movement[1]'
    # Then we can change the order of list 'next_pl'.
    # So we can have an updated version of plan by  the greedy search.
    import math 
    
    way_lst = [] 
    current = list(start) 
    while(True):
        next_pl = []
        next_min = -1 
        for movement in plan: 
            movement = list(movement) 
            if(movement not in way_lst): 
                x = current 
                y = movement[1] 
                dis = (abs(x[0] - y[0]) + abs(x[1] - y[1]))
                if(dis < next_min or next_min == -1): 
                    next_pl = movement
                    next_min = dis
        if(next_pl == []):
            break 
        way_lst.append(next_pl) 
        current = next_pl[2] 
    
    # Make split two methods to gain the distance of move by following the path 
    # sorted by the greedy search strategy.
    # One is for move of truck to other dot in other tuple.    
    # Another is for move of truck in the same tuple considering the case that 
    # number of box is greater than capacity.
    # from diamond 2
    result = 0
    x, y = start
    for movement in way_lst:
        result += abs(x - movement[1][0]) + abs(y - movement[1][1])
        x, y = movement[2]         
    if capacity >= 0:
        for movement in way_lst:
            boxes = movement[0]
            rest = math.ceil(boxes / capacity)
            for i in range(1, len(movement) - 1):
                result += (2 * rest - 1) * (abs(movement[i][0] 
                                            - movement[i + 1][0]) 
                                        + abs(movement[i][1] 
                                              - movement[i + 1][1]))
        return result

    

